def pp_face(face: ImportedFace) -> Face:
	{
		id = face.id,
		size = face.size,
		stime = face.stime,
		head = face.head,
		gaze = face.gaze,
		emotion = face.emotion,
		region = face.region
	}

def pp_shot(shot: ImportedShot) -> Shot:
	{
		startTime = shot.startTime,
		endTime = shot.endTime,
		scale = shot.scale,
		angle = shot.angle,
		level = shot.level,
		movement = shot.movement,
		people = shot.people,
		faces = map(pp_face, shot.faces),
		actors = map(pp_face, shot.faces),  //map(pp_face, filter(lambda x: x.actor, shot.faces)),
		tags = shot.tags,
		next = shot.next,
		place = shot.place,
		roles = shot.roles
	}

def pp_video(video: ImportedVideo) -> Video:
	{
		channel = video.channel,
		filename = video.filename,
		title = video.title,
		publishedAt = video.publishedAt,
		videoId = video.videoId,
		shots = map(pp_shot, video.shots),
		speakerTurns = video.speakerTurns
	}

def pp_corpus(corpus: ImportedCorpus) -> Corpus:
	{
		version = corpus.version,
		videos = map(pp_video, corpus.videos)
	}

// utility functions

@operator(infix, left, 7)
def overlaps(a, b):
  len(intersection(a, b)) >= 1

def is_indirect_gaze(g):
  abs(g.h) > 2.5

def is_same_place(next):
  next.image.siglip > 0.25

@macro
def any_id_pair(f, xs):
  any(lambda pair: match pair:
    case Rule key [x1, x2]:
      f
    case _:
      False
  , group_by(.id, xs))

def id_pairs(xs):
    for x in filter(lambda x: len(x) == 2,
        values(group_by(.id, xs))):
        match x:
            case [a, b]:
                Pair a b

@macro
def always(f, xs):
  all(lambda x: match x: case [x1, x2]: f, pairs(xs))

def most(xs):
	take(len(xs) - 1, xs)
