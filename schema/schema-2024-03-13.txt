enum ShotDistance
	= ECU # extreme close-up
	| CU  # close-up
	| MS  # medium shot
	| FS  # full shot
	| LS  # long shot

enum Gender
	= MALE
	| FEMALE
	| UNKNOWN_GENDER

enum Sentiment
	= NEGATIVE
	| NEUTRAL
	| POSITIVE

type Fuzzy a = {
	name: a,
	p: Float  # [0, 100]
}

type WordClassFreq = {
	verb: Float,
	propn: Float,
	pron: Float,
	part: Float,
	num: Float,
	noun: Float,
	intj: Float,
	det: Float,
	conj: Float,
	aux: Float,
	adv: Float,
	adp: Float,
	adj: Float
}

type SpeakerTurn = {
	id: String,
	startTime: Float,  # seconds
	endTime: Float,    # seconds
	numWords: Int,
	words: WordClassFreq,
	tags: List Fuzzy String,
	sentiment: List Fuzzy Sentiment,
	gender: Gender
}

type HeadPose = {
	pitch: Float,  # degrees
	roll: Float,   # degrees
	yaw: Float     # degrees
}

type HeadGaze = {
	h: Float,	   # degrees, horizontal
	v: Float       # degrees, vertical
}

type Region = {
	center: Float,  # [0, 100]
	left: Float,    # [0, 100]
	right: Float    # [0, 100]
}

type Face = {
	id: String,
	actor: Bool,
	stime: Float,      # screen time in the shot [0, 100]
	head: HeadPose,
	gaze: HeadGaze,
	emotion: List Fuzzy String,
	region: Region
}

type ShotStability = {
	xclip: Float,
	videomae: Float,
	vitb: Float,
	siglip: Float,
	places: Float
}

type Shot = {
	startTime: Float,  # seconds
	endTime: Float,    # seconds
	distance: ShotDistance,
	faces: List Face,
	tags: List Fuzzy String,
	stability: ShotStability
}

type Video = {
	channel: String,
	title: String,
	publishedAt: Int,
	videoId: String,
	shots: List Shot,
	speakerTurns: List SpeakerTurn
}

type Corpus = {
	version: String,
	videos: List Video
}

def top(xs):
	match max(xs, .p):
		case Just x: x.name
		else: ""

def top(xs: List Fuzzy Sentiment):
	match max(xs, .p):
		case Just x: x.name
		else: NEUTRAL
